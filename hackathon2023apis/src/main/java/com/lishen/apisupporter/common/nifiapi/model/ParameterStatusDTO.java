/*
 * NiFi Rest API
 * The Rest API provides programmatic access to command and control a NiFi instance in real time. Start and                                             stop processors, monitor queues, query provenance data, and more. Each endpoint below includes a description,                                             definitions of the expected input and output, potential response codes, and the authorizations required                                             to invoke each service.
 *
 * OpenAPI spec version: 1.23.2
 * Contact: dev@nifi.apache.org
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.lishen.apisupporter.common.nifiapi.model;

import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModelProperty;

import java.io.IOException;
import java.util.Objects;

/**
 * ParameterStatusDTO
 */
@javax.annotation.Generated(value = "io.swagger.codegen.languages.JavaClientCodegen", date = "2023-09-13T23:19:14.614+09:00")
public class ParameterStatusDTO {
    @SerializedName("parameter")
    private ParameterEntity parameter = null;
    @SerializedName("status")
    private StatusEnum status = null;

    public ParameterStatusDTO parameter(ParameterEntity parameter) {
        this.parameter = parameter;
        return this;
    }

    /**
     * The name of the Parameter
     *
     * @return parameter
     **/
    @ApiModelProperty(value = "The name of the Parameter")
    public ParameterEntity getParameter() {
        return parameter;
    }

    public void setParameter(ParameterEntity parameter) {
        this.parameter = parameter;
    }

    public ParameterStatusDTO status(StatusEnum status) {
        this.status = status;
        return this;
    }

    /**
     * Indicates the status of the parameter, compared to the existing parameter context
     *
     * @return status
     **/
    @ApiModelProperty(value = "Indicates the status of the parameter, compared to the existing parameter context")
    public StatusEnum getStatus() {
        return status;
    }

    public void setStatus(StatusEnum status) {
        this.status = status;
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        ParameterStatusDTO parameterStatusDTO = (ParameterStatusDTO) o;
        return Objects.equals(this.parameter, parameterStatusDTO.parameter) &&
                Objects.equals(this.status, parameterStatusDTO.status);
    }

    @Override
    public int hashCode() {
        return Objects.hash(parameter, status);
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder();
        sb.append("class ParameterStatusDTO {\n");

        sb.append("    parameter: ").append(toIndentedString(parameter)).append("\n");
        sb.append("    status: ").append(toIndentedString(status)).append("\n");
        sb.append("}");
        return sb.toString();
    }

    /**
     * Convert the given object to string with each line indented by 4 spaces
     * (except the first line).
     */
    private String toIndentedString(Object o) {
        if (o == null) {
            return "null";
        }
        return o.toString().replace("\n", "\n    ");
    }

    /**
     * Indicates the status of the parameter, compared to the existing parameter context
     */
    @JsonAdapter(StatusEnum.Adapter.class)
    public enum StatusEnum {
        NEW("NEW"),

        CHANGED("CHANGED"),

        REMOVED("REMOVED"),

        MISSING_BUT_REFERENCED("MISSING_BUT_REFERENCED"),

        UNCHANGED("UNCHANGED");

        private String value;

        StatusEnum(String value) {
            this.value = value;
        }

        public static StatusEnum fromValue(String text) {
            for (StatusEnum b : StatusEnum.values()) {
                if (String.valueOf(b.value).equals(text)) {
                    return b;
                }
            }
            return null;
        }

        public String getValue() {
            return value;
        }

        @Override
        public String toString() {
            return String.valueOf(value);
        }

        public static class Adapter extends TypeAdapter<StatusEnum> {
            @Override
            public void write(final JsonWriter jsonWriter, final StatusEnum enumeration) throws IOException {
                jsonWriter.value(enumeration.getValue());
            }

            @Override
            public StatusEnum read(final JsonReader jsonReader) throws IOException {
                String value = jsonReader.nextString();
                return StatusEnum.fromValue(String.valueOf(value));
            }
        }
    }

}

