/*
 * NiFi Rest API
 * The Rest API provides programmatic access to command and control a NiFi instance in real time. Start and                                             stop processors, monitor queues, query provenance data, and more. Each endpoint below includes a description,                                             definitions of the expected input and output, potential response codes, and the authorizations required                                             to invoke each service.
 *
 * OpenAPI spec version: 1.23.2
 * Contact: dev@nifi.apache.org
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.lishen.apisupporter.common.nifiapi.model;

import com.google.gson.annotations.SerializedName;
import io.swagger.annotations.ApiModelProperty;

import java.util.Objects;

/**
 * PropertyAllowableValue
 */
@javax.annotation.Generated(value = "io.swagger.codegen.languages.JavaClientCodegen", date = "2023-09-13T23:19:14.614+09:00")
public class PropertyAllowableValue {
    @SerializedName("value")
    private String value = null;

    @SerializedName("displayName")
    private String displayName = null;

    @SerializedName("description")
    private String description = null;

    public PropertyAllowableValue value(String value) {
        this.value = value;
        return this;
    }

    /**
     * The internal value
     *
     * @return value
     **/
    @ApiModelProperty(required = true, value = "The internal value")
    public String getValue() {
        return value;
    }

    public void setValue(String value) {
        this.value = value;
    }

    public PropertyAllowableValue displayName(String displayName) {
        this.displayName = displayName;
        return this;
    }

    /**
     * The display name of the value, if different from the internal value
     *
     * @return displayName
     **/
    @ApiModelProperty(value = "The display name of the value, if different from the internal value")
    public String getDisplayName() {
        return displayName;
    }

    public void setDisplayName(String displayName) {
        this.displayName = displayName;
    }

    public PropertyAllowableValue description(String description) {
        this.description = description;
        return this;
    }

    /**
     * The description of the value, e.g., the behavior it produces.
     *
     * @return description
     **/
    @ApiModelProperty(value = "The description of the value, e.g., the behavior it produces.")
    public String getDescription() {
        return description;
    }

    public void setDescription(String description) {
        this.description = description;
    }


    @Override
    public boolean equals(Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        PropertyAllowableValue propertyAllowableValue = (PropertyAllowableValue) o;
        return Objects.equals(this.value, propertyAllowableValue.value) &&
                Objects.equals(this.displayName, propertyAllowableValue.displayName) &&
                Objects.equals(this.description, propertyAllowableValue.description);
    }

    @Override
    public int hashCode() {
        return Objects.hash(value, displayName, description);
    }


    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder();
        sb.append("class PropertyAllowableValue {\n");

        sb.append("    value: ").append(toIndentedString(value)).append("\n");
        sb.append("    displayName: ").append(toIndentedString(displayName)).append("\n");
        sb.append("    description: ").append(toIndentedString(description)).append("\n");
        sb.append("}");
        return sb.toString();
    }

    /**
     * Convert the given object to string with each line indented by 4 spaces
     * (except the first line).
     */
    private String toIndentedString(Object o) {
        if (o == null) {
            return "null";
        }
        return o.toString().replace("\n", "\n    ");
    }

}

