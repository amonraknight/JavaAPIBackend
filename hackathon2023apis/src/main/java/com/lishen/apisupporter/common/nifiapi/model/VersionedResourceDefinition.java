/*
 * NiFi Rest API
 * The Rest API provides programmatic access to command and control a NiFi instance in real time. Start and                                             stop processors, monitor queues, query provenance data, and more. Each endpoint below includes a description,                                             definitions of the expected input and output, potential response codes, and the authorizations required                                             to invoke each service.
 *
 * OpenAPI spec version: 1.23.2
 * Contact: dev@nifi.apache.org
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.lishen.apisupporter.common.nifiapi.model;

import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModelProperty;

import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import java.util.Objects;

/**
 * VersionedResourceDefinition
 */
@javax.annotation.Generated(value = "io.swagger.codegen.languages.JavaClientCodegen", date = "2023-09-13T23:19:14.614+09:00")
public class VersionedResourceDefinition {
    @SerializedName("cardinality")
    private CardinalityEnum cardinality = null;
    @SerializedName("resourceTypes")
    private List<ResourceTypesEnum> resourceTypes = null;

    public VersionedResourceDefinition cardinality(CardinalityEnum cardinality) {
        this.cardinality = cardinality;
        return this;
    }

    /**
     * The cardinality of the resource
     *
     * @return cardinality
     **/
    @ApiModelProperty(value = "The cardinality of the resource")
    public CardinalityEnum getCardinality() {
        return cardinality;
    }

    public void setCardinality(CardinalityEnum cardinality) {
        this.cardinality = cardinality;
    }

    public VersionedResourceDefinition resourceTypes(List<ResourceTypesEnum> resourceTypes) {
        this.resourceTypes = resourceTypes;
        return this;
    }

    public VersionedResourceDefinition addResourceTypesItem(ResourceTypesEnum resourceTypesItem) {
        if (this.resourceTypes == null) {
            this.resourceTypes = new ArrayList<ResourceTypesEnum>();
        }
        this.resourceTypes.add(resourceTypesItem);
        return this;
    }

    /**
     * The types of resource that the Property Descriptor is allowed to reference
     *
     * @return resourceTypes
     **/
    @ApiModelProperty(value = "The types of resource that the Property Descriptor is allowed to reference")
    public List<ResourceTypesEnum> getResourceTypes() {
        return resourceTypes;
    }

    public void setResourceTypes(List<ResourceTypesEnum> resourceTypes) {
        this.resourceTypes = resourceTypes;
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        VersionedResourceDefinition versionedResourceDefinition = (VersionedResourceDefinition) o;
        return Objects.equals(this.cardinality, versionedResourceDefinition.cardinality) &&
                Objects.equals(this.resourceTypes, versionedResourceDefinition.resourceTypes);
    }

    @Override
    public int hashCode() {
        return Objects.hash(cardinality, resourceTypes);
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder();
        sb.append("class VersionedResourceDefinition {\n");

        sb.append("    cardinality: ").append(toIndentedString(cardinality)).append("\n");
        sb.append("    resourceTypes: ").append(toIndentedString(resourceTypes)).append("\n");
        sb.append("}");
        return sb.toString();
    }

    /**
     * Convert the given object to string with each line indented by 4 spaces
     * (except the first line).
     */
    private String toIndentedString(Object o) {
        if (o == null) {
            return "null";
        }
        return o.toString().replace("\n", "\n    ");
    }


    /**
     * The cardinality of the resource
     */
    @JsonAdapter(CardinalityEnum.Adapter.class)
    public enum CardinalityEnum {
        SINGLE("SINGLE"),

        MULTIPLE("MULTIPLE");

        private String value;

        CardinalityEnum(String value) {
            this.value = value;
        }

        public static CardinalityEnum fromValue(String text) {
            for (CardinalityEnum b : CardinalityEnum.values()) {
                if (String.valueOf(b.value).equals(text)) {
                    return b;
                }
            }
            return null;
        }

        public String getValue() {
            return value;
        }

        @Override
        public String toString() {
            return String.valueOf(value);
        }

        public static class Adapter extends TypeAdapter<CardinalityEnum> {
            @Override
            public void write(final JsonWriter jsonWriter, final CardinalityEnum enumeration) throws IOException {
                jsonWriter.value(enumeration.getValue());
            }

            @Override
            public CardinalityEnum read(final JsonReader jsonReader) throws IOException {
                String value = jsonReader.nextString();
                return CardinalityEnum.fromValue(String.valueOf(value));
            }
        }
    }

    /**
     * Gets or Sets resourceTypes
     */
    @JsonAdapter(ResourceTypesEnum.Adapter.class)
    public enum ResourceTypesEnum {
        FILE("FILE"),

        DIRECTORY("DIRECTORY"),

        TEXT("TEXT"),

        URL("URL");

        private String value;

        ResourceTypesEnum(String value) {
            this.value = value;
        }

        public static ResourceTypesEnum fromValue(String text) {
            for (ResourceTypesEnum b : ResourceTypesEnum.values()) {
                if (String.valueOf(b.value).equals(text)) {
                    return b;
                }
            }
            return null;
        }

        public String getValue() {
            return value;
        }

        @Override
        public String toString() {
            return String.valueOf(value);
        }

        public static class Adapter extends TypeAdapter<ResourceTypesEnum> {
            @Override
            public void write(final JsonWriter jsonWriter, final ResourceTypesEnum enumeration) throws IOException {
                jsonWriter.value(enumeration.getValue());
            }

            @Override
            public ResourceTypesEnum read(final JsonReader jsonReader) throws IOException {
                String value = jsonReader.nextString();
                return ResourceTypesEnum.fromValue(String.valueOf(value));
            }
        }
    }

}

