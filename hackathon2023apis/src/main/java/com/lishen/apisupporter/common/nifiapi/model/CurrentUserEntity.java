/*
 * NiFi Rest API
 * The Rest API provides programmatic access to command and control a NiFi instance in real time. Start and                                             stop processors, monitor queues, query provenance data, and more. Each endpoint below includes a description,                                             definitions of the expected input and output, potential response codes, and the authorizations required                                             to invoke each service.
 *
 * OpenAPI spec version: 1.23.2
 * Contact: dev@nifi.apache.org
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.lishen.apisupporter.common.nifiapi.model;

import com.google.gson.annotations.SerializedName;
import io.swagger.annotations.ApiModelProperty;

import java.util.ArrayList;
import java.util.List;
import java.util.Objects;

/**
 * CurrentUserEntity
 */
@javax.annotation.Generated(value = "io.swagger.codegen.languages.JavaClientCodegen", date = "2023-09-13T23:19:14.614+09:00")
public class CurrentUserEntity {
    @SerializedName("identity")
    private String identity = null;

    @SerializedName("anonymous")
    private Boolean anonymous = null;

    @SerializedName("provenancePermissions")
    private PermissionsDTO provenancePermissions = null;

    @SerializedName("countersPermissions")
    private PermissionsDTO countersPermissions = null;

    @SerializedName("tenantsPermissions")
    private PermissionsDTO tenantsPermissions = null;

    @SerializedName("controllerPermissions")
    private PermissionsDTO controllerPermissions = null;

    @SerializedName("policiesPermissions")
    private PermissionsDTO policiesPermissions = null;

    @SerializedName("systemPermissions")
    private PermissionsDTO systemPermissions = null;

    @SerializedName("parameterContextPermissions")
    private PermissionsDTO parameterContextPermissions = null;

    @SerializedName("restrictedComponentsPermissions")
    private PermissionsDTO restrictedComponentsPermissions = null;

    @SerializedName("componentRestrictionPermissions")
    private List<ComponentRestrictionPermissionDTO> componentRestrictionPermissions = null;

    @SerializedName("canVersionFlows")
    private Boolean canVersionFlows = null;

    public CurrentUserEntity identity(String identity) {
        this.identity = identity;
        return this;
    }

    /**
     * The user identity being serialized.
     *
     * @return identity
     **/
    @ApiModelProperty(value = "The user identity being serialized.")
    public String getIdentity() {
        return identity;
    }

    public void setIdentity(String identity) {
        this.identity = identity;
    }

    public CurrentUserEntity anonymous(Boolean anonymous) {
        this.anonymous = anonymous;
        return this;
    }

    /**
     * Whether the current user is anonymous.
     *
     * @return anonymous
     **/
    @ApiModelProperty(value = "Whether the current user is anonymous.")
    public Boolean isAnonymous() {
        return anonymous;
    }

    public void setAnonymous(Boolean anonymous) {
        this.anonymous = anonymous;
    }

    public CurrentUserEntity provenancePermissions(PermissionsDTO provenancePermissions) {
        this.provenancePermissions = provenancePermissions;
        return this;
    }

    /**
     * Permissions for querying provenance.
     *
     * @return provenancePermissions
     **/
    @ApiModelProperty(value = "Permissions for querying provenance.")
    public PermissionsDTO getProvenancePermissions() {
        return provenancePermissions;
    }

    public void setProvenancePermissions(PermissionsDTO provenancePermissions) {
        this.provenancePermissions = provenancePermissions;
    }

    public CurrentUserEntity countersPermissions(PermissionsDTO countersPermissions) {
        this.countersPermissions = countersPermissions;
        return this;
    }

    /**
     * Permissions for accessing counters.
     *
     * @return countersPermissions
     **/
    @ApiModelProperty(value = "Permissions for accessing counters.")
    public PermissionsDTO getCountersPermissions() {
        return countersPermissions;
    }

    public void setCountersPermissions(PermissionsDTO countersPermissions) {
        this.countersPermissions = countersPermissions;
    }

    public CurrentUserEntity tenantsPermissions(PermissionsDTO tenantsPermissions) {
        this.tenantsPermissions = tenantsPermissions;
        return this;
    }

    /**
     * Permissions for accessing tenants.
     *
     * @return tenantsPermissions
     **/
    @ApiModelProperty(value = "Permissions for accessing tenants.")
    public PermissionsDTO getTenantsPermissions() {
        return tenantsPermissions;
    }

    public void setTenantsPermissions(PermissionsDTO tenantsPermissions) {
        this.tenantsPermissions = tenantsPermissions;
    }

    public CurrentUserEntity controllerPermissions(PermissionsDTO controllerPermissions) {
        this.controllerPermissions = controllerPermissions;
        return this;
    }

    /**
     * Permissions for accessing the controller.
     *
     * @return controllerPermissions
     **/
    @ApiModelProperty(value = "Permissions for accessing the controller.")
    public PermissionsDTO getControllerPermissions() {
        return controllerPermissions;
    }

    public void setControllerPermissions(PermissionsDTO controllerPermissions) {
        this.controllerPermissions = controllerPermissions;
    }

    public CurrentUserEntity policiesPermissions(PermissionsDTO policiesPermissions) {
        this.policiesPermissions = policiesPermissions;
        return this;
    }

    /**
     * Permissions for accessing the policies.
     *
     * @return policiesPermissions
     **/
    @ApiModelProperty(value = "Permissions for accessing the policies.")
    public PermissionsDTO getPoliciesPermissions() {
        return policiesPermissions;
    }

    public void setPoliciesPermissions(PermissionsDTO policiesPermissions) {
        this.policiesPermissions = policiesPermissions;
    }

    public CurrentUserEntity systemPermissions(PermissionsDTO systemPermissions) {
        this.systemPermissions = systemPermissions;
        return this;
    }

    /**
     * Permissions for accessing system.
     *
     * @return systemPermissions
     **/
    @ApiModelProperty(value = "Permissions for accessing system.")
    public PermissionsDTO getSystemPermissions() {
        return systemPermissions;
    }

    public void setSystemPermissions(PermissionsDTO systemPermissions) {
        this.systemPermissions = systemPermissions;
    }

    public CurrentUserEntity parameterContextPermissions(PermissionsDTO parameterContextPermissions) {
        this.parameterContextPermissions = parameterContextPermissions;
        return this;
    }

    /**
     * Permissions for accessing parameter contexts.
     *
     * @return parameterContextPermissions
     **/
    @ApiModelProperty(value = "Permissions for accessing parameter contexts.")
    public PermissionsDTO getParameterContextPermissions() {
        return parameterContextPermissions;
    }

    public void setParameterContextPermissions(PermissionsDTO parameterContextPermissions) {
        this.parameterContextPermissions = parameterContextPermissions;
    }

    public CurrentUserEntity restrictedComponentsPermissions(PermissionsDTO restrictedComponentsPermissions) {
        this.restrictedComponentsPermissions = restrictedComponentsPermissions;
        return this;
    }

    /**
     * Permissions for accessing restricted components. Note: the read permission are not used and will always be false.
     *
     * @return restrictedComponentsPermissions
     **/
    @ApiModelProperty(value = "Permissions for accessing restricted components. Note: the read permission are not used and will always be false.")
    public PermissionsDTO getRestrictedComponentsPermissions() {
        return restrictedComponentsPermissions;
    }

    public void setRestrictedComponentsPermissions(PermissionsDTO restrictedComponentsPermissions) {
        this.restrictedComponentsPermissions = restrictedComponentsPermissions;
    }

    public CurrentUserEntity componentRestrictionPermissions(List<ComponentRestrictionPermissionDTO> componentRestrictionPermissions) {
        this.componentRestrictionPermissions = componentRestrictionPermissions;
        return this;
    }

    public CurrentUserEntity addComponentRestrictionPermissionsItem(ComponentRestrictionPermissionDTO componentRestrictionPermissionsItem) {
        if (this.componentRestrictionPermissions == null) {
            this.componentRestrictionPermissions = new ArrayList<ComponentRestrictionPermissionDTO>();
        }
        this.componentRestrictionPermissions.add(componentRestrictionPermissionsItem);
        return this;
    }

    /**
     * Permissions for specific component restrictions.
     *
     * @return componentRestrictionPermissions
     **/
    @ApiModelProperty(value = "Permissions for specific component restrictions.")
    public List<ComponentRestrictionPermissionDTO> getComponentRestrictionPermissions() {
        return componentRestrictionPermissions;
    }

    public void setComponentRestrictionPermissions(List<ComponentRestrictionPermissionDTO> componentRestrictionPermissions) {
        this.componentRestrictionPermissions = componentRestrictionPermissions;
    }

    public CurrentUserEntity canVersionFlows(Boolean canVersionFlows) {
        this.canVersionFlows = canVersionFlows;
        return this;
    }

    /**
     * Whether the current user can version flows.
     *
     * @return canVersionFlows
     **/
    @ApiModelProperty(value = "Whether the current user can version flows.")
    public Boolean isCanVersionFlows() {
        return canVersionFlows;
    }

    public void setCanVersionFlows(Boolean canVersionFlows) {
        this.canVersionFlows = canVersionFlows;
    }


    @Override
    public boolean equals(Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        CurrentUserEntity currentUserEntity = (CurrentUserEntity) o;
        return Objects.equals(this.identity, currentUserEntity.identity) &&
                Objects.equals(this.anonymous, currentUserEntity.anonymous) &&
                Objects.equals(this.provenancePermissions, currentUserEntity.provenancePermissions) &&
                Objects.equals(this.countersPermissions, currentUserEntity.countersPermissions) &&
                Objects.equals(this.tenantsPermissions, currentUserEntity.tenantsPermissions) &&
                Objects.equals(this.controllerPermissions, currentUserEntity.controllerPermissions) &&
                Objects.equals(this.policiesPermissions, currentUserEntity.policiesPermissions) &&
                Objects.equals(this.systemPermissions, currentUserEntity.systemPermissions) &&
                Objects.equals(this.parameterContextPermissions, currentUserEntity.parameterContextPermissions) &&
                Objects.equals(this.restrictedComponentsPermissions, currentUserEntity.restrictedComponentsPermissions) &&
                Objects.equals(this.componentRestrictionPermissions, currentUserEntity.componentRestrictionPermissions) &&
                Objects.equals(this.canVersionFlows, currentUserEntity.canVersionFlows);
    }

    @Override
    public int hashCode() {
        return Objects.hash(identity, anonymous, provenancePermissions, countersPermissions, tenantsPermissions, controllerPermissions, policiesPermissions, systemPermissions, parameterContextPermissions, restrictedComponentsPermissions, componentRestrictionPermissions, canVersionFlows);
    }


    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder();
        sb.append("class CurrentUserEntity {\n");

        sb.append("    identity: ").append(toIndentedString(identity)).append("\n");
        sb.append("    anonymous: ").append(toIndentedString(anonymous)).append("\n");
        sb.append("    provenancePermissions: ").append(toIndentedString(provenancePermissions)).append("\n");
        sb.append("    countersPermissions: ").append(toIndentedString(countersPermissions)).append("\n");
        sb.append("    tenantsPermissions: ").append(toIndentedString(tenantsPermissions)).append("\n");
        sb.append("    controllerPermissions: ").append(toIndentedString(controllerPermissions)).append("\n");
        sb.append("    policiesPermissions: ").append(toIndentedString(policiesPermissions)).append("\n");
        sb.append("    systemPermissions: ").append(toIndentedString(systemPermissions)).append("\n");
        sb.append("    parameterContextPermissions: ").append(toIndentedString(parameterContextPermissions)).append("\n");
        sb.append("    restrictedComponentsPermissions: ").append(toIndentedString(restrictedComponentsPermissions)).append("\n");
        sb.append("    componentRestrictionPermissions: ").append(toIndentedString(componentRestrictionPermissions)).append("\n");
        sb.append("    canVersionFlows: ").append(toIndentedString(canVersionFlows)).append("\n");
        sb.append("}");
        return sb.toString();
    }

    /**
     * Convert the given object to string with each line indented by 4 spaces
     * (except the first line).
     */
    private String toIndentedString(Object o) {
        if (o == null) {
            return "null";
        }
        return o.toString().replace("\n", "\n    ");
    }

}

